ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 100),
ylim = c(0, 10000),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 100),
ylim = c(0, 200),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 200),
ylim = c(0, 200),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 20),
ylim = c(0, 200),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 25),
ylim = c(0, 200),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
rm(list = ls())
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
limit = 25
i = 4
answers = c()
while(i <= limit){
# lines(getAns(i))
answers = c(answers, getAns(i))
i = i + 1
}
answers
answers = c()
while(i <= limit){
# lines(getAns(i))
temp = getAns(i)
answers = c(answers, temp)
i = i + 1
}
answers
answers = c()
while(i <= limit){
# lines(getAns(i))
temp = getAns(i)
answers = c(answers, temp)
i = i + 1
}
answers
answers = c()
while(i <= limit){
# lines(getAns(i))
answers = c(answers, getAns(i))
i = i + 1
}
answers
rm(list = ls())
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
answers = c()
while(i <= limit){
# lines(getAns(i))
answers = c(answers, getAns(i))
i = i + 1
}
answers
limit = 25
i = 4
answers = c()
while(i <= limit){
# lines(getAns(i))
answers = c(answers, getAns(i))
i = i + 1
}
answers
str()
rm(list=ls())
print(emp.data)
print("Hello World")
2+2
a <- 10
a
b <- 100
c <- a * b
d<-"Hello"
z <+ 2
d = "hell
"
d
rm(d)
# install.packages('caTools')
library(caTools)
dataset <- read.csv('Data.csv')
dataset
dataset$Age <- ifelse(
is.na(dataset$Age), # if there's no value
ave(dataset$Age, # return mean of the column values
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age # else return the original column value
)
dataset$Salary <- ifelse(
is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
dataset
dataset$Country <- factor(
dataset$Country, # select column to encode
levels = c('France', 'Spain', 'Germany'), # what values to encode
labels = c(1,2,3) # replacement values
)
dataset$Purchased <- factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
dataset$Country
set.seed(123)
split <- sample.split(
Y = dataset$Purchased, # dependent variable
SplitRatio = 0.8 # percentage of observations 80% for the training set 20% to the test set
)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
training_set
test_set
training_set
# install.packages('caTools')
library(caTools)
dataset <- read.csv('Data.csv')
dataset
dataset$Age <- ifelse(
is.na(dataset$Age), # if there's no value
ave(dataset$Age, # return mean of the column values
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age # else return the original column value
)
dataset$Salary <- ifelse(
is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
dataset
dataset$Country <- factor(
dataset$Country, # select column to encode
levels = c('France', 'Spain', 'Germany'), # what values to encode
labels = c(1,2,3) # replacement values
)
dataset$Purchased <- factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
dataset$Country
set.seed(123)
split <- sample.split(
Y = dataset$Purchased, # dependent variable
SplitRatio = 0.8 # percentage of observations 80% for the training set 20% to the test set
)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
training_set
test_set
# install.packages('caTools')
library(caTools)
dataset <- read.csv('Data.csv')
dataset
dataset$Age <- ifelse(
is.na(dataset$Age), # if there's no value
ave(dataset$Age, # return mean of the column values
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age # else return the original column value
)
dataset$Salary <- ifelse(
is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
dataset
dataset$Country <- factor(
dataset$Country, # select column to encode
levels = c('France', 'Spain', 'Germany'), # what values to encode
labels = c(1,2,3) # replacement values
)
dataset$Purchased <- factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
dataset
set.seed(123)
split <- sample.split(
Y = dataset$Purchased, # dependent variable
SplitRatio = 0.8 # percentage of observations 80% for the training set 20% to the test set
)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
training_set
test_set
plot(dataset$Age, dataset$Salary)
training_set <- scale(training_set)
# install.packages('caTools')
library(caTools)
dataset <- read.csv('Data.csv')
dataset
dataset$Age <- ifelse(
is.na(dataset$Age), # if there's no value
ave(dataset$Age, # return mean of the column values
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age # else return the original column value
)
dataset$Salary <- ifelse(
is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
dataset
dataset$Country <- factor(
dataset$Country, # select column to encode
levels = c('France', 'Spain', 'Germany'), # what values to encode
labels = c(1,2,3) # replacement values
)
dataset$Purchased <- factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
dataset
set.seed(123)
split <- sample.split(
Y = dataset$Purchased, # dependent variable
SplitRatio = 0.8 # percentage of observations 80% for the training set 20% to the test set
)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
training_set
test_set
training_set <- scale(training_set)
training_set[,2:3] <- scale(training_set[,2:3])
test_set[,2:3] <- scale(test_set[,2:3])
# install.packages('caTools')
library(caTools)
dataset <- read.csv('Data.csv')
dataset
dataset$Age <- ifelse(
is.na(dataset$Age), # if there's no value
ave(dataset$Age, # return mean of the column values
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age # else return the original column value
)
dataset$Salary <- ifelse(
is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
dataset
dataset$Country <- factor(
dataset$Country, # select column to encode
levels = c('France', 'Spain', 'Germany'), # what values to encode
labels = c(1,2,3) # replacement values
)
dataset$Purchased <- factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
dataset
set.seed(123)
split <- sample.split(
Y = dataset$Purchased, # dependent variable
SplitRatio = 0.8 # percentage of observations 80% for the training set 20% to the test set
)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
training_set
test_set
training_set[,2:3] <- scale(training_set[,2:3])
test_set[,2:3] <- scale(test_set[,2:3])
training_set
test_set
# install.packages('caTools')
library(caTools)
dataset <- read.csv('Data.csv')
dataset
dataset$Age <- ifelse(
is.na(dataset$Age), # if there's no value
ave(dataset$Age, # return mean of the column values
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age # else return the original column value
)
dataset$Salary <- ifelse(
is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
dataset
dataset$Country <- factor(
dataset$Country, # select column to encode
levels = c('France', 'Spain', 'Germany'), # what values to encode
labels = c(1,2,3) # replacement values
)
dataset$Purchased <- factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
dataset
plot(dataset$Age, dataset$Salary)
set.seed(123)
split <- sample.split(
Y = dataset$Purchased, # dependent variable
SplitRatio = 0.8 # percentage of observations 80% for the training set 20% to the test set
)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
training_set
test_set
training_set[,2:3] <- scale(training_set[,2:3])
test_set[,2:3] <- scale(test_set[,2:3])
training_set
test_set
setwd("~/machine-learning/2-regression/1-simple-linear-regression")
setwd("~/machine-learning/2-regression/1-simple-linear-regression")
dataset <- read.csv('Salary_Data.csv')
# dataset <- dataset[, 2:3]
dataset
cor(dataset)
# --- INDEX STARTS AS 1 ---
# Data Preprocessing
# importing dataset
dataset <- read.csv('Salary_Data.csv')
# splitting dataset into training set and test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split <- sample.split(
Y = dataset$Salary, # dependent variable
SplitRatio = 2/3 # percentage of observations 2/3 for the training set 1/3 to the test set
)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
View(dataset)
regressor <- lm(formula = Salary ~ YearsExpreience)
regressor <- lm(
formula = Salary ~ YearsExpreience,
data = training_set
)
regressor <- lm(
formula = Salary ~ YearsExperience,
data = training_set
)
sumamry(regressor)
summary(regressor)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
