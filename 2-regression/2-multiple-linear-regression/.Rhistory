}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 100),
ylim = c(0, 10000),
pch = 20
)
limit = 27
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 100),
ylim = c(0, 10000),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 100),
ylim = c(0, 200),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 200),
ylim = c(0, 200),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 20),
ylim = c(0, 200),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
initial = getAns(3)
plot(
initial,
type = "l",
col = "#009999",
xlab = "x axis",
ylab = "y axis",
xlim = c(0, 25),
ylim = c(0, 200),
pch = 20
)
limit = 25
i = 4
while(i <= limit){
lines(getAns(i))
i = i + 1
}
rm(list = ls())
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
limit = 25
i = 4
answers = c()
while(i <= limit){
# lines(getAns(i))
answers = c(answers, getAns(i))
i = i + 1
}
answers
answers = c()
while(i <= limit){
# lines(getAns(i))
temp = getAns(i)
answers = c(answers, temp)
i = i + 1
}
answers
answers = c()
while(i <= limit){
# lines(getAns(i))
temp = getAns(i)
answers = c(answers, temp)
i = i + 1
}
answers
answers = c()
while(i <= limit){
# lines(getAns(i))
answers = c(answers, getAns(i))
i = i + 1
}
answers
rm(list = ls())
getAns = function(numChoice){
dataList = c()
solution = function(num){
if(num == 1) {return(dataList)}
if(num %% 2 == 1){
ans = num * 3 + 1
}else if(num %% 2 == 0){
ans = num / 2
}
dataList = c(dataList, ans)
return(c(dataList, solution(dataList[length(dataList)])))
}
return = solution(numChoice)
}
answers = c()
while(i <= limit){
# lines(getAns(i))
answers = c(answers, getAns(i))
i = i + 1
}
answers
limit = 25
i = 4
answers = c()
while(i <= limit){
# lines(getAns(i))
answers = c(answers, getAns(i))
i = i + 1
}
answers
str()
rm(list=ls())
print(emp.data)
print("Hello World")
2+2
a <- 10
a
b <- 100
c <- a * b
d<-"Hello"
z <+ 2
d = "hell
"
d
rm(d)
datasset <- read.csv('inurance.csv')
datasset <- read.csv('insurance.csv')
setwd("~/machine-learning/2-regression/2-multiple-linear-regression")
datasset <- read.csv('insurance.csv')
View(datasset)
is.na(dataset)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
length(is.na(dataset))
dataset[!complete.cases(dataset)]
dataset[!complete.cases(dataset)]
sexs <- unique(dataset$sex)
sexs <- unique(dataset$sex)
smokers <- unique(dataset$smoker)
regions <- unique(dataset$region)
sexs
smokers
regions
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
dataset
View(dataset)
summary(dataset)
str(dataset)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
str(dataset)
regressor <- lm(
formula = charges ~ age + sex + bmi + children + smoker + region ,
data = training_set,
)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
significance_level = 0.05
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = charges ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
significance_level = 0.05
backwardElimination(training_set, significance_level)
backwardElimination(training_set, significance_level)
backwardElimination(training_set, significance_level)
regressor <- lm(
formula = charges ~ age + bmi + children + smoker2,
data = training_set
)
regressor <- lm(
formula = charges ~ age + bmi + children + smoker,
data = training_set
)
regressor
summary(regressor)
y_pred <- predict(
regressor,
newdata = test_set
)
y_pred
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
View(test_set)
str(dataset)
summary(regressor)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
ggplot() +
geom_point(
aes(
# dataset of what we are visualizing
x = training_set$age,
y = training_set$charge
),
colour = 'red'
) +
geom_line(
aes(
# use regression from training
x = training_set$age,
predict(regressor, newdata = training_set)
),
colour = 'blue'
) +
ggtitle('age vs charge (Training Set)') +
xlab('age') +
ylab('charge')
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
source('~/machine-learning/2-regression/2-multiple-linear-regression/insurance-multiple-linear-regression-backward-elimination.R', echo=TRUE)
dataset <- read.csv('ths_data.csv')
str(dataset)
set.seed(321654987)
split <- sample.split(
dataset$humidity,
SplitRatio = 0.9
)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
training_set
test_set
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = humidity ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
significance_level = 0.05
backwardElimination(training_set, significance_level)
regressor <- lm(
formula = humidity ~ hour + temperature,
data = training_set
)
summary(regressor)
y_pred <- predict(
regressor,
newdata = test_set
)
y_pred
ggplot() +
geom_point(
aes(
# dataset of what we are visualizing
x = training_set$temperature,
y = training_set$humidity
),
colour = 'red'
) +
geom_line(
aes(
# use regression from training
x = training_set$temperature,
predict(regressor, newdata = training_set)
),
colour = 'blue'
) +
ggtitle('temperature vs humidity (Training Set)') +
xlab('temperature') +
ylab('humidity')
regressor <- lm(
formula = humidity ~ temperature,
data = training_set
)
summary(regressor)
y_pred <- predict(
regressor,
newdata = test_set
)
ggplot() +
geom_point(
aes(
# dataset of what we are visualizing
x = training_set$temperature,
y = training_set$humidity
),
colour = 'red'
) +
geom_line(
aes(
# use regression from training
x = training_set$temperature,
predict(regressor, newdata = training_set)
),
colour = 'blue'
) +
ggtitle('temperature vs humidity (Training Set)') +
xlab('temperature') +
ylab('humidity')
ggplot() +
geom_point(
aes(
# dataset of what we are visualizing
x = test_set$temperature,
y = test_set$humidity
),
colour = 'red'
) +
geom_line(
aes(
# use regression from training
x = training_set$temperature,
predict(regressor, newdata = training_set)
),
colour = 'blue'
) +
ggtitle('temperature vs humidity (Training Set)') +
xlab('temperature') +
ylab('humidity')
ggplot() +
geom_point(
aes(
# dataset of what we are visualizing
x = test_set$temperature,
y = y_pred
),
colour = 'red'
) +
geom_line(
aes(
# use regression from training
x = training_set$temperature,
predict(regressor, newdata = training_set)
),
colour = 'blue'
) +
ggtitle('temperature vs humidity (Predicted Values)') +
xlab('temperature') +
ylab('humidity')
cor(dataset)
cor(dataset$temperature, dataset$humidity)
cor(dataset$temperature, dataset$humidity. dataset$hour)
cor(c(dataset$temperature, dataset$humidity. dataset$hour))
cor(c(dataset$temperature, dataset$humidity, dataset$hour))
cor(c(dataset$temperature,  dataset$hour))
cor(dataset$temperature,  dataset$hour)
cor(dataset$humidity,  dataset$hour)
cor(dataset$humidity,  dataset$temperature)
plot(dataset$humidity, dataset$temperature)
